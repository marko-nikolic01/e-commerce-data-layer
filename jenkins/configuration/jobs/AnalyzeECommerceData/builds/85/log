Started by user [8mha:////4NhrNatbXaQKljqXcoS9ngQQ7onYqNIevFDbkW/rMbA0AAAAlx+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAzWEgZu/dLi1CL9xJTczDwAj6GcLcAAAAA=[0madmin
Running as SYSTEM
Building in workspace /var/jenkins_home/workspace/AnalyzeECommerceData
[SSH] script:
PATH="/opt/java/openjdk/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
JAVA_HOME="/opt/java/openjdk"
HOME="/root"

echo "Starting Spark job..." | tee -a spark_job.log

LOG_FILE=/opt/bitnami/spark/logs/analyze_e_commerce_data.log

export JAVA_HOME=/opt/bitnami/java
export PATH=$JAVA_HOME/bin:$PATH
export PATH=$PATH:/opt/bitnami/python/bin
export PYSPARK_PYTHON=/opt/bitnami/python/bin/python3
export CORE_CONF_fs_defaultFS=hdfs://namenode:9000
export POSTGRES_USER=postgres
export POSTGRES_PASSWORD=postgres
export POSTGRES_URI=jdbc:postgresql://postgres:5432
export CORE_CONF_fs_defaultFS=hdfs://namenode:9000

/opt/bitnami/spark/bin/spark-submit --master spark://spark-master:7077 --jars /opt/bitnami/spark/jars/postgresql-42.2.23.jar /opt/bitnami/spark/jobs/analyze_e_commerce_data.py 2>&1 | tee -a "$LOG_FILE"

exit_code=${PIPESTATUS[0]}

if [ $exit_code -ne 0 ]; then
  echo "Spark job FAILED!" | tee -a "$LOG_FILE"
  exit 1
else
  echo "Spark job completed successfully." | tee -a "$LOG_FILE"
fi


[SSH] executing...
Starting Spark job...
25/04/09 11:01:46 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable
Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties
25/04/09 11:01:46 INFO SparkContext: Running Spark version 3.2.2
25/04/09 11:01:46 INFO ResourceUtils: ==============================================================
25/04/09 11:01:46 INFO ResourceUtils: No custom resources configured for spark.driver.
25/04/09 11:01:46 INFO ResourceUtils: ==============================================================
25/04/09 11:01:46 INFO SparkContext: Submitted application: Analyze e-commerce data
25/04/09 11:01:46 INFO ResourceProfile: Default ResourceProfile created, executor resources: Map(cores -> name: cores, amount: 1, script: , vendor: , memory -> name: memory, amount: 1024, script: , vendor: , offHeap -> name: offHeap, amount: 0, script: , vendor: ), task resources: Map(cpus -> name: cpus, amount: 1.0)
25/04/09 11:01:46 INFO ResourceProfile: Limiting resource is cpu
25/04/09 11:01:46 INFO ResourceProfileManager: Added ResourceProfile id: 0
25/04/09 11:01:46 INFO SecurityManager: Changing view acls to: root
25/04/09 11:01:46 INFO SecurityManager: Changing modify acls to: root
25/04/09 11:01:46 INFO SecurityManager: Changing view acls groups to: 
25/04/09 11:01:46 INFO SecurityManager: Changing modify acls groups to: 
25/04/09 11:01:46 INFO SecurityManager: SecurityManager: authentication disabled; ui acls disabled; users  with view permissions: Set(root); groups with view permissions: Set(); users  with modify permissions: Set(root); groups with modify permissions: Set()
25/04/09 11:01:47 INFO Utils: Successfully started service 'sparkDriver' on port 45775.
25/04/09 11:01:47 INFO SparkEnv: Registering MapOutputTracker
25/04/09 11:01:47 INFO SparkEnv: Registering BlockManagerMaster
25/04/09 11:01:47 INFO BlockManagerMasterEndpoint: Using org.apache.spark.storage.DefaultTopologyMapper for getting topology information
25/04/09 11:01:47 INFO BlockManagerMasterEndpoint: BlockManagerMasterEndpoint up
25/04/09 11:01:47 INFO SparkEnv: Registering BlockManagerMasterHeartbeat
25/04/09 11:01:47 INFO DiskBlockManager: Created local directory at /tmp/blockmgr-7a566a62-2d6b-49c8-9a8f-398a80d5abc8
25/04/09 11:01:47 INFO MemoryStore: MemoryStore started with capacity 366.3 MiB
25/04/09 11:01:47 INFO SparkEnv: Registering OutputCommitCoordinator
25/04/09 11:01:47 INFO Utils: Successfully started service 'SparkUI' on port 4040.
25/04/09 11:01:47 INFO SparkUI: Bound SparkUI to 0.0.0.0, and started at http://3fada93ce917:4040
25/04/09 11:01:47 INFO SparkContext: Added JAR /opt/bitnami/spark/jars/postgresql-42.2.23.jar at spark://3fada93ce917:45775/jars/postgresql-42.2.23.jar with timestamp 1744196506814
25/04/09 11:01:47 INFO StandaloneAppClient$ClientEndpoint: Connecting to master spark://spark-master:7077...
25/04/09 11:01:47 INFO TransportClientFactory: Successfully created connection to spark-master/172.18.0.14:7077 after 21 ms (0 ms spent in bootstraps)
25/04/09 11:01:47 INFO StandaloneSchedulerBackend: Connected to Spark cluster with app ID app-20250409110147-0073
25/04/09 11:01:47 INFO StandaloneAppClient$ClientEndpoint: Executor added: app-20250409110147-0073/0 on worker-20250408075749-172.18.0.9-36639 (172.18.0.9:36639) with 4 core(s)
25/04/09 11:01:47 INFO StandaloneSchedulerBackend: Granted executor ID app-20250409110147-0073/0 on hostPort 172.18.0.9:36639 with 4 core(s), 1024.0 MiB RAM
25/04/09 11:01:47 INFO StandaloneAppClient$ClientEndpoint: Executor added: app-20250409110147-0073/1 on worker-20250408075749-172.18.0.3-40933 (172.18.0.3:40933) with 4 core(s)
25/04/09 11:01:47 INFO StandaloneSchedulerBackend: Granted executor ID app-20250409110147-0073/1 on hostPort 172.18.0.3:40933 with 4 core(s), 1024.0 MiB RAM
25/04/09 11:01:47 INFO StandaloneAppClient$ClientEndpoint: Executor added: app-20250409110147-0073/2 on worker-20250408075749-172.18.0.12-42009 (172.18.0.12:42009) with 4 core(s)
25/04/09 11:01:47 INFO StandaloneSchedulerBackend: Granted executor ID app-20250409110147-0073/2 on hostPort 172.18.0.12:42009 with 4 core(s), 1024.0 MiB RAM
25/04/09 11:01:47 INFO Utils: Successfully started service 'org.apache.spark.network.netty.NettyBlockTransferService' on port 37919.
25/04/09 11:01:47 INFO NettyBlockTransferService: Server created on 3fada93ce917:37919
25/04/09 11:01:47 INFO BlockManager: Using org.apache.spark.storage.RandomBlockReplicationPolicy for block replication policy
25/04/09 11:01:47 INFO BlockManagerMaster: Registering BlockManager BlockManagerId(driver, 3fada93ce917, 37919, None)
25/04/09 11:01:47 INFO StandaloneAppClient$ClientEndpoint: Executor updated: app-20250409110147-0073/1 is now RUNNING
25/04/09 11:01:47 INFO StandaloneAppClient$ClientEndpoint: Executor updated: app-20250409110147-0073/0 is now RUNNING
25/04/09 11:01:47 INFO BlockManagerMasterEndpoint: Registering block manager 3fada93ce917:37919 with 366.3 MiB RAM, BlockManagerId(driver, 3fada93ce917, 37919, None)
25/04/09 11:01:47 INFO StandaloneAppClient$ClientEndpoint: Executor updated: app-20250409110147-0073/2 is now RUNNING
25/04/09 11:01:47 INFO BlockManagerMaster: Registered BlockManager BlockManagerId(driver, 3fada93ce917, 37919, None)
25/04/09 11:01:47 INFO BlockManager: Initialized BlockManager: BlockManagerId(driver, 3fada93ce917, 37919, None)
25/04/09 11:01:47 INFO StandaloneSchedulerBackend: SchedulerBackend is ready for scheduling beginning after reached minRegisteredResourcesRatio: 0.0
25/04/09 11:01:47 INFO SharedState: spark.sql.warehouse.dir is not set, but hive.metastore.warehouse.dir is set. Setting spark.sql.warehouse.dir to the value of hive.metastore.warehouse.dir.
25/04/09 11:01:47 INFO SharedState: Warehouse path is 'file:/user/hive/warehouse'.
25/04/09 11:01:48 INFO HiveConf: Found configuration file file:/opt/bitnami/spark/conf/hive-site.xml
25/04/09 11:01:48 INFO HiveUtils: Initializing HiveMetastoreConnection version 2.3.9 using Spark classes.
25/04/09 11:01:49 INFO HiveConf: Found configuration file file:/opt/bitnami/spark/conf/hive-site.xml
25/04/09 11:01:49 INFO HiveClientImpl: Warehouse location for Hive client (version 2.3.9) is file:/user/hive/warehouse
25/04/09 11:01:49 INFO metastore: Trying to connect to metastore with URI thrift://hive-metastore:9083
25/04/09 11:01:49 INFO metastore: Opened a connection to metastore, current connections: 1
25/04/09 11:01:49 INFO metastore: Connected to metastore.
25/04/09 11:01:49 INFO CoarseGrainedSchedulerBackend$DriverEndpoint: Registered executor NettyRpcEndpointRef(spark-client://Executor) (172.18.0.3:34750) with ID 1,  ResourceProfileId 0
25/04/09 11:01:49 INFO CoarseGrainedSchedulerBackend$DriverEndpoint: Registered executor NettyRpcEndpointRef(spark-client://Executor) (172.18.0.12:53362) with ID 2,  ResourceProfileId 0
25/04/09 11:01:49 INFO CoarseGrainedSchedulerBackend$DriverEndpoint: Registered executor NettyRpcEndpointRef(spark-client://Executor) (172.18.0.9:52248) with ID 0,  ResourceProfileId 0
25/04/09 11:01:49 INFO BlockManagerMasterEndpoint: Registering block manager 172.18.0.3:43479 with 366.3 MiB RAM, BlockManagerId(1, 172.18.0.3, 43479, None)
25/04/09 11:01:49 INFO BlockManagerMasterEndpoint: Registering block manager 172.18.0.12:38899 with 366.3 MiB RAM, BlockManagerId(2, 172.18.0.12, 38899, None)
25/04/09 11:01:49 INFO BlockManagerMasterEndpoint: Registering block manager 172.18.0.9:37271 with 366.3 MiB RAM, BlockManagerId(0, 172.18.0.9, 37271, None)
25/04/09 11:01:50 INFO InMemoryFileIndex: It took 68 ms to list leaf files for 1 paths.
25/04/09 11:01:51 INFO InMemoryFileIndex: It took 2 ms to list leaf files for 1 paths.
Traceback (most recent call last):
  File "/opt/bitnami/spark/jobs/analyze_e_commerce_data.py", line 168, in <module>
    combined_sale_items = historical_sale_items.unionByName(sale_items)
  File "/opt/bitnami/spark/python/lib/pyspark.zip/pyspark/sql/dataframe.py", line 1901, in unionByName
  File "/opt/bitnami/spark/python/lib/py4j-0.10.9.5-src.zip/py4j/java_gateway.py", line 1321, in __call__
  File "/opt/bitnami/spark/python/lib/pyspark.zip/pyspark/sql/utils.py", line 117, in deco
pyspark.sql.utils.AnalysisException: Union can only be performed on tables with the same number of columns, but the first table has 7 columns and the second table has 8 columns;
'Union false, false
:- Project [StockCode#378, SaleInvoiceNo#377, ProductName#379, Quantity#380, Price#381, InvoiceDateTS#387, CustomerID#394]
:  +- Join Inner, (StockCode#378 = StockCode#327)
:     :- Project [SaleInvoiceNo#377, StockCode#378, ProductName#379, Quantity#380, Price#381, InvoiceDateTS#387, -1 AS CustomerID#394]
:     :  +- Project [SaleInvoiceNo#377, StockCode#378, ProductName#379, Quantity#380, Price#381, cast(1900-01-01 as timestamp) AS InvoiceDateTS#387]
:     :     +- Relation [SaleInvoiceNo#377,StockCode#378,ProductName#379,Quantity#380,Price#381] JDBCRelation(sale_items) [numPartitions=1]
:     +- Deduplicate [StockCode#327]
:        +- Project [StockCode#327]
:           +- Project [SaleInvoiceNo#226, ProductName#7, Quantity#29, Price#220, InvoiceNo#326, StockCode#327, CustomerID#329, InvoiceDateTS#45]
:              +- Project [SaleInvoiceNo#226, StockCode#28, ProductName#7, Quantity#29, Price#220, InvoiceNo#326, StockCode#327, CustomerID#329, InvoiceDateTS#45]
:                 +- Join LeftOuter, ((SaleInvoiceNo#226 = InvoiceNo#326) AND (StockCode#28 = StockCode#327))
:                    :- Project [InvoiceNo#27 AS SaleInvoiceNo#226, StockCode#28, ProductName#7, Quantity#29, Price#220]
:                    :  +- Project [InvoiceNo#27, StockCode#28, ProductName#7, Quantity#29, CheckOverflow((promote_precision(cast(cast(Quantity#29 as decimal(10,0)) as decimal(15,5))) * promote_precision(cast(UnitPrice#9 as decimal(15,5)))), DecimalType(21,5), true) AS Price#220]
:                    :     +- Join Inner, ((StockCode#28 = StockCode#6) AND (InvoiceDateShort#166 = date_format(cast(ProductDate#183 as timestamp), yyyy-MM-dd, Some(Etc/UTC))))
:                    :        :- Project [CountryId#86, InvoiceNo#27, StockCode#28, Quantity#29, CustomerID#30, Country#31, InvoiceDate#32, InvoiceDateTS#45, RegionId#95, countryname#142, Region#154, date_format(InvoiceDateTS#45, yyyy-MM-dd, Some(Etc/UTC)) AS InvoiceDateShort#166]
:                    :        :  +- Project [CountryId#86, InvoiceNo#27, StockCode#28, Quantity#29, CustomerID#30, Country#31, InvoiceDate#32, InvoiceDateTS#45, RegionId#95, countryname#142, get_region(RegionId#95) AS Region#154]
:                    :        :     +- Project [CountryId#86, InvoiceNo#27, StockCode#28, Quantity#29, CustomerID#30, Country#31, InvoiceDate#32, InvoiceDateTS#45, RegionId#95, countryname#142]
:                    :        :        +- Join Inner, (cast(CountryId#86 as int) = countryid#141)
:                    :        :           :- Join LeftSemi, (cast(CountryId#86 as int) = CountryId#0)
:                    :        :           :  :- Project [InvoiceNo#27, StockCode#28, Quantity#29, CustomerID#30, Country#31, InvoiceDate#32, InvoiceDateTS#45, CountryId#86, split(Country#31, -, -1)[1] AS RegionId#95]
:                    :        :           :  :  +- Project [InvoiceNo#27, StockCode#28, Quantity#29, CustomerID#30, Country#31, InvoiceDate#32, InvoiceDateTS#45, split(Country#31, -, -1)[0] AS CountryId#86]
:                    :        :           :  :     +- Union false, false
:                    :        :           :  :        :- Filter ((InvoiceDateTS#45 >= to_timestamp(2025-04-09-07-00, Some(yyyy-MM-dd-HH-mm))) AND (InvoiceDateTS#45 <= to_timestamp(2025-04-09-11-00, Some(yyyy-MM-dd-HH-mm))))
:                    :        :           :  :        :  +- Project [InvoiceNo#27, StockCode#28, Quantity#29, CustomerID#30, Country#31, InvoiceDate#32, to_timestamp('InvoiceDate, Some(yyyy-MM-dd-HH-mm)) AS InvoiceDateTS#45]
:                    :        :           :  :        :     +- SubqueryAlias spark_catalog.default.logs
:                    :        :           :  :        :        +- Relation default.logs[InvoiceNo#27,StockCode#28,Quantity#29,CustomerID#30,Country#31,InvoiceDate#32] parquet
:                    :        :           :  :        +- Project [InvoiceNo#53, StockCode#54, Quantity#55, CustomerID#56, Country#57, InvoiceDate#58, to_timestamp('InvoiceDate, Some(yyyy-MM-dd-HH-mm)) AS InvoiceDateTS#71]
:                    :        :           :  :           +- SubqueryAlias spark_catalog.default.unprocessedlogs
:                    :        :           :  :              +- Relation default.unprocessedlogs[InvoiceNo#53,StockCode#54,Quantity#55,CustomerID#56,Country#57,InvoiceDate#58] parquet
:                    :        :           :  +- SubqueryAlias spark_catalog.default.countries
:                    :        :           :     +- Relation default.countries[countryid#0,countryname#1] parquet
:                    :        :           +- SubqueryAlias spark_catalog.default.countries
:                    :        :              +- Relation default.countries[countryid#141,countryname#142] parquet
:                    :        +- Project [StockCode#6, UnitPrice#9, Date#21 AS ProductDate#183, ProductName#7]
:                    :           +- Project [StockCode#6, UnitPrice#9, Date#21, ProductName#7]
:                    :              +- Project [StockCode#6, ProductName#7, ProductDescription#8, UnitPrice#9, to_date('Date, Some(yyyy-MM-dd)) AS Date#21]
:                    :                 +- SubqueryAlias spark_catalog.default.products
:                    :                    +- Relation default.products[StockCode#6,ProductName#7,ProductDescription#8,UnitPrice#9,Date#10] parquet
:                    +- Project [InvoiceNo#326, StockCode#327, CustomerID#329, InvoiceDateTS#45]
:                       +- Project [CountryId#86, InvoiceNo#326, StockCode#327, Quantity#328, CustomerID#329, Country#330, InvoiceDate#331, InvoiceDateTS#45, RegionId#95, countryname#341, Region#154, date_format(InvoiceDateTS#45, yyyy-MM-dd, Some(Etc/UTC)) AS InvoiceDateShort#166]
:                          +- Project [CountryId#86, InvoiceNo#326, StockCode#327, Quantity#328, CustomerID#329, Country#330, InvoiceDate#331, InvoiceDateTS#45, RegionId#95, countryname#341, get_region(RegionId#95) AS Region#154]
:                             +- Project [CountryId#86, InvoiceNo#326, StockCode#327, Quantity#328, CustomerID#329, Country#330, InvoiceDate#331, InvoiceDateTS#45, RegionId#95, countryname#341]
:                                +- Join Inner, (cast(CountryId#86 as int) = countryid#340)
:                                   :- Join LeftSemi, (cast(CountryId#86 as int) = CountryId#338)
:                                   :  :- Project [InvoiceNo#326, StockCode#327, Quantity#328, CustomerID#329, Country#330, InvoiceDate#331, InvoiceDateTS#45, CountryId#86, split(Country#330, -, -1)[1] AS RegionId#95]
:                                   :  :  +- Project [InvoiceNo#326, StockCode#327, Quantity#328, CustomerID#329, Country#330, InvoiceDate#331, InvoiceDateTS#45, split(Country#330, -, -1)[0] AS CountryId#86]
:                                   :  :     +- Union false, false
:                                   :  :        :- Filter ((InvoiceDateTS#45 >= to_timestamp(2025-04-09-07-00, Some(yyyy-MM-dd-HH-mm))) AND (InvoiceDateTS#45 <= to_timestamp(2025-04-09-11-00, Some(yyyy-MM-dd-HH-mm))))
:                                   :  :        :  +- Project [InvoiceNo#326, StockCode#327, Quantity#328, CustomerID#329, Country#330, InvoiceDate#331, to_timestamp('InvoiceDate, Some(yyyy-MM-dd-HH-mm)) AS InvoiceDateTS#45]
:                                   :  :        :     +- SubqueryAlias spark_catalog.default.logs
:                                   :  :        :        +- Relation default.logs[InvoiceNo#326,StockCode#327,Quantity#328,CustomerID#329,Country#330,InvoiceDate#331] parquet
:                                   :  :        +- Project [InvoiceNo#332, StockCode#333, Quantity#334, CustomerID#335, Country#336, InvoiceDate#337, to_timestamp('InvoiceDate, Some(yyyy-MM-dd-HH-mm)) AS InvoiceDateTS#71]
:                                   :  :           +- SubqueryAlias spark_catalog.default.unprocessedlogs
:                                   :  :              +- Relation default.unprocessedlogs[InvoiceNo#332,StockCode#333,Quantity#334,CustomerID#335,Country#336,InvoiceDate#337] parquet
:                                   :  +- SubqueryAlias spark_catalog.default.countries
:                                   :     +- Relation default.countries[countryid#338,countryname#339] parquet
:                                   +- SubqueryAlias spark_catalog.default.countries
:                                      +- Relation default.countries[countryid#340,countryname#341] parquet
+- Project [StockCode#432, SaleInvoiceNo#226, ProductName#427, Quantity#412, Price#220, InvoiceDateTS#45, CustomerID#434, InvoiceNo#431]
   +- Project [SaleInvoiceNo#226, ProductName#427, Quantity#412, Price#220, InvoiceNo#431, StockCode#432, CustomerID#434, InvoiceDateTS#45]
      +- Project [SaleInvoiceNo#226, StockCode#411, ProductName#427, Quantity#412, Price#220, InvoiceNo#431, StockCode#432, CustomerID#434, InvoiceDateTS#45]
         +- Join LeftOuter, ((SaleInvoiceNo#226 = InvoiceNo#431) AND (StockCode#411 = StockCode#432))
            :- Project [InvoiceNo#410 AS SaleInvoiceNo#226, StockCode#411, ProductName#427, Quantity#412, Price#220]
            :  +- Project [InvoiceNo#410, StockCode#411, ProductName#427, Quantity#412, CheckOverflow((promote_precision(cast(cast(Quantity#412 as decimal(10,0)) as decimal(15,5))) * promote_precision(cast(UnitPrice#429 as decimal(15,5)))), DecimalType(21,5), true) AS Price#220]
            :     +- Join Inner, ((StockCode#411 = StockCode#426) AND (InvoiceDateShort#166 = date_format(cast(ProductDate#183 as timestamp), yyyy-MM-dd, Some(Etc/UTC))))
            :        :- Project [CountryId#86, InvoiceNo#410, StockCode#411, Quantity#412, CustomerID#413, Country#414, InvoiceDate#415, InvoiceDateTS#45, RegionId#95, countryname#425, Region#154, date_format(InvoiceDateTS#45, yyyy-MM-dd, Some(Etc/UTC)) AS InvoiceDateShort#166]
            :        :  +- Project [CountryId#86, InvoiceNo#410, StockCode#411, Quantity#412, CustomerID#413, Country#414, InvoiceDate#415, InvoiceDateTS#45, RegionId#95, countryname#425, get_region(RegionId#95) AS Region#154]
            :        :     +- Project [CountryId#86, InvoiceNo#410, StockCode#411, Quantity#412, CustomerID#413, Country#414, InvoiceDate#415, InvoiceDateTS#45, RegionId#95, countryname#425]
            :        :        +- Join Inner, (cast(CountryId#86 as int) = countryid#424)
            :        :           :- Join LeftSemi, (cast(CountryId#86 as int) = CountryId#422)
            :        :           :  :- Project [InvoiceNo#410, StockCode#411, Quantity#412, CustomerID#413, Country#414, InvoiceDate#415, InvoiceDateTS#45, CountryId#86, split(Country#414, -, -1)[1] AS RegionId#95]
            :        :           :  :  +- Project [InvoiceNo#410, StockCode#411, Quantity#412, CustomerID#413, Country#414, InvoiceDate#415, InvoiceDateTS#45, split(Country#414, -, -1)[0] AS CountryId#86]
            :        :           :  :     +- Union false, false
            :        :           :  :        :- Filter ((InvoiceDateTS#45 >= to_timestamp(2025-04-09-07-00, Some(yyyy-MM-dd-HH-mm))) AND (InvoiceDateTS#45 <= to_timestamp(2025-04-09-11-00, Some(yyyy-MM-dd-HH-mm))))
            :        :           :  :        :  +- Project [InvoiceNo#410, StockCode#411, Quantity#412, CustomerID#413, Country#414, InvoiceDate#415, to_timestamp('InvoiceDate, Some(yyyy-MM-dd-HH-mm)) AS InvoiceDateTS#45]
            :        :           :  :        :     +- SubqueryAlias spark_catalog.default.logs
            :        :           :  :        :        +- Relation default.logs[InvoiceNo#410,StockCode#411,Quantity#412,CustomerID#413,Country#414,InvoiceDate#415] parquet
            :        :           :  :        +- Project [InvoiceNo#416, StockCode#417, Quantity#418, CustomerID#419, Country#420, InvoiceDate#421, to_timestamp('InvoiceDate, Some(yyyy-MM-dd-HH-mm)) AS InvoiceDateTS#71]
            :        :           :  :           +- SubqueryAlias spark_catalog.default.unprocessedlogs
            :        :           :  :              +- Relation default.unprocessedlogs[InvoiceNo#416,StockCode#417,Quantity#418,CustomerID#419,Country#420,InvoiceDate#421] parquet
            :        :           :  +- SubqueryAlias spark_catalog.default.countries
            :        :           :     +- Relation default.countries[countryid#422,countryname#423] parquet
            :        :           +- SubqueryAlias spark_catalog.default.countries
            :        :              +- Relation default.countries[countryid#424,countryname#425] parquet
            :        +- Project [StockCode#426, UnitPrice#429, Date#21 AS ProductDate#183, ProductName#427]
            :           +- Project [StockCode#426, UnitPrice#429, Date#21, ProductName#427]
            :              +- Project [StockCode#426, ProductName#427, ProductDescription#428, UnitPrice#429, to_date('Date, Some(yyyy-MM-dd)) AS Date#21]
            :                 +- SubqueryAlias spark_catalog.default.products
            :                    +- Relation default.products[StockCode#426,ProductName#427,ProductDescription#428,UnitPrice#429,Date#430] parquet
            +- Project [InvoiceNo#431, StockCode#432, CustomerID#434, InvoiceDateTS#45]
               +- Project [CountryId#86, InvoiceNo#431, StockCode#432, Quantity#433, CustomerID#434, Country#435, InvoiceDate#436, InvoiceDateTS#45, RegionId#95, countryname#446, Region#154, date_format(InvoiceDateTS#45, yyyy-MM-dd, Some(Etc/UTC)) AS InvoiceDateShort#166]
                  +- Project [CountryId#86, InvoiceNo#431, StockCode#432, Quantity#433, CustomerID#434, Country#435, InvoiceDate#436, InvoiceDateTS#45, RegionId#95, countryname#446, get_region(RegionId#95) AS Region#154]
                     +- Project [CountryId#86, InvoiceNo#431, StockCode#432, Quantity#433, CustomerID#434, Country#435, InvoiceDate#436, InvoiceDateTS#45, RegionId#95, countryname#446]
                        +- Join Inner, (cast(CountryId#86 as int) = countryid#445)
                           :- Join LeftSemi, (cast(CountryId#86 as int) = CountryId#443)
                           :  :- Project [InvoiceNo#431, StockCode#432, Quantity#433, CustomerID#434, Country#435, InvoiceDate#436, InvoiceDateTS#45, CountryId#86, split(Country#435, -, -1)[1] AS RegionId#95]
                           :  :  +- Project [InvoiceNo#431, StockCode#432, Quantity#433, CustomerID#434, Country#435, InvoiceDate#436, InvoiceDateTS#45, split(Country#435, -, -1)[0] AS CountryId#86]
                           :  :     +- Union false, false
                           :  :        :- Filter ((InvoiceDateTS#45 >= to_timestamp(2025-04-09-07-00, Some(yyyy-MM-dd-HH-mm))) AND (InvoiceDateTS#45 <= to_timestamp(2025-04-09-11-00, Some(yyyy-MM-dd-HH-mm))))
                           :  :        :  +- Project [InvoiceNo#431, StockCode#432, Quantity#433, CustomerID#434, Country#435, InvoiceDate#436, to_timestamp('InvoiceDate, Some(yyyy-MM-dd-HH-mm)) AS InvoiceDateTS#45]
                           :  :        :     +- SubqueryAlias spark_catalog.default.logs
                           :  :        :        +- Relation default.logs[InvoiceNo#431,StockCode#432,Quantity#433,CustomerID#434,Country#435,InvoiceDate#436] parquet
                           :  :        +- Project [InvoiceNo#437, StockCode#438, Quantity#439, CustomerID#440, Country#441, InvoiceDate#442, to_timestamp('InvoiceDate, Some(yyyy-MM-dd-HH-mm)) AS InvoiceDateTS#71]
                           :  :           +- SubqueryAlias spark_catalog.default.unprocessedlogs
                           :  :              +- Relation default.unprocessedlogs[InvoiceNo#437,StockCode#438,Quantity#439,CustomerID#440,Country#441,InvoiceDate#442] parquet
                           :  +- SubqueryAlias spark_catalog.default.countries
                           :     +- Relation default.countries[countryid#443,countryname#444] parquet
                           +- SubqueryAlias spark_catalog.default.countries
                              +- Relation default.countries[countryid#445,countryname#446] parquet

25/04/09 11:01:51 INFO SparkContext: Invoking stop() from shutdown hook
25/04/09 11:01:51 INFO SparkUI: Stopped Spark web UI at http://3fada93ce917:4040
25/04/09 11:01:51 INFO StandaloneSchedulerBackend: Shutting down all executors
25/04/09 11:01:51 INFO CoarseGrainedSchedulerBackend$DriverEndpoint: Asking each executor to shut down
25/04/09 11:01:51 INFO MapOutputTrackerMasterEndpoint: MapOutputTrackerMasterEndpoint stopped!
25/04/09 11:01:51 INFO MemoryStore: MemoryStore cleared
25/04/09 11:01:51 INFO BlockManager: BlockManager stopped
25/04/09 11:01:51 INFO BlockManagerMaster: BlockManagerMaster stopped
25/04/09 11:01:51 INFO OutputCommitCoordinator$OutputCommitCoordinatorEndpoint: OutputCommitCoordinator stopped!
25/04/09 11:01:51 INFO SparkContext: Successfully stopped SparkContext
25/04/09 11:01:51 INFO ShutdownHookManager: Shutdown hook called
25/04/09 11:01:51 INFO ShutdownHookManager: Deleting directory /tmp/spark-0bf0f875-936b-49f7-90b2-cac93389dddc
25/04/09 11:01:51 INFO ShutdownHookManager: Deleting directory /tmp/spark-634782fa-10f2-4009-b405-9956a862051b
25/04/09 11:01:51 INFO ShutdownHookManager: Deleting directory /tmp/spark-0bf0f875-936b-49f7-90b2-cac93389dddc/pyspark-6f736190-c4ed-4557-8a1e-3815d346491c
Spark job FAILED!

[SSH] completed
[SSH] exit-status: 1

Build step 'Execute shell script on remote host using ssh' marked build as failure
Sending e-mails to: nikolicmarko1243@gmail.com
Finished: FAILURE
